import com.phone.versionplugin.BuildVersions

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    //ARouter需要用到
    id 'kotlin-kapt'
    id 'maven-publish'
    id 'com.phone.versionplugin'
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = project.findProperty("GROUP_ID")   // 组织标识
                artifactId = project.findProperty("ARTIFACT_ID")    // 库名称
                version = project.findProperty("BASE64_LIBRARY_VERSION")           // 版本号

                // 自动关联 release 版 AAR
//                from components.release
                // 指定 AAR 文件路径
                artifact("$rootDir/outputs/aars/${project.name}-release.aar")

                // 添加源码包（可选）
                artifact(sourcesJar)




                pom {
                    name = project.findProperty("ARTIFACT_ID")    // 库名称
                    description = project.findProperty("ARTIFACT_ID")    // 库名称
                    url = "https://maven.pkg.github.com/UrasakiNakajima/RxJava2AndRetrofit2"
                    licenses {
                        license {
                            name = "Apache-2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    developers {
                        developer {
                            id = project.findProperty("GROUP_ID")   // 组织标识
                            name = "UrasakiNakajima"
                            email = "1164688204@qq.com"
                        }
                    }
                    scm {
                        connection = "scm:git:git://maven.pkg.github.com/UrasakiNakajima/RxJava2AndRetrofit2.git"
                        developerConnection = "scm:git:ssh://maven.pkg.github.com/UrasakiNakajima/RxJava2AndRetrofit2.git"
                        url = "https://maven.pkg.github.com/UrasakiNakajima/RxJava2AndRetrofit2"
                    }
                }


                // 添加依赖传递
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    // 添加 implementation 依赖
                    configurations.implementation.allDependencies.each { dep ->
                        if (dep.group != null && dep.name != null && dep.version != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dep.group)
                            dependencyNode.appendNode('artifactId', dep.name)
                            dependencyNode.appendNode('version', dep.version)
                            dependencyNode.appendNode('scope', 'runtime') // 或 'compile'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                // 👇 关键URL格式（替换两个YOUR_）
                url = uri("https://maven.pkg.github.com/UrasakiNakajima/RxJava2AndRetrofit2")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }

//    signing {
//        sign publishing.publications.release  // 自动签名
//    }
}

// 创建源码JAR任务
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}

android {
    compileSdk BuildVersions.compileSdk

    defaultConfig {
        minSdk BuildVersions.minSdk
        targetSdk BuildVersions.targetSdk
        versionCode BuildVersions.versionCode
        versionName BuildVersions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

//    buildTypes {
//        release {
//            //java代码中引用的定义形式
//            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
//            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
//        debug {
//            //java代码中引用的定义形式
//            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
//            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
//    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            manifest.srcFile 'src/main/java/library/AndroidManifest.xml'
        }
    }
    //给Module 内的资源名增加前缀, 避免资源名冲突
    resourcePrefix "base64_"
}

dependencies {
    implementation project(path: ':library_common')
    implementation project(path: ':library_mvp')
    implementation "id.zelory:compressor:$BuildVersions.compressor_version"
    //Android路由（用于不同app之间的跳转）
//    implementation "com.alibaba:arouter-api:$BuildVersions.arouter_api_version"
    kapt "com.alibaba:arouter-compiler:$BuildVersions.arouter_compiler_version"

    //阿里云Oss对象存储
    implementation "com.aliyun.dpa:oss-android-sdk:$BuildVersions.oss_android_sdk_version"

}