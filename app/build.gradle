import com.phone.versionplugin.BuildVersions

plugins {
    //body app（不可单独运行）
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    //ARouter需要用到
    id 'kotlin-kapt'
    id 'com.phone.versionplugin'
}
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.huawei.agconnect'Xz&150120


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

android {
    compileSdk BuildVersions.compileSdk

    defaultConfig {
        applicationId "com.phone.rxjava2andretrofit2"
        minSdk BuildVersions.minSdk
        targetSdk BuildVersions.targetSdk
        versionCode BuildVersions.versionCode
        versionName BuildVersions.versionName

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//            }
//        }

        ndk {
            //手机项目只要选择这两种cpu类型的.so库就可以了，不用添加'x86', 'x86_64', 'mips', 'mips64'的.so库
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: "com.phone.rxjava2andretrofit2",
                JPUSH_APPKEY : "8e2573e36e6e9c4d624d29d4", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]


        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    //android 模块下开启DataBinding（必须添加，即使此module没有用到也要添加）
    dataBinding {
        enabled = true
    }

    //开启Java1_8 能够使用lambda表达式
    compileOptions {
        sourceCompatibility "1.8"
        targetCompatibility "1.8"
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        release {
            storeFile file('../rxjava2_and_retrofit2_release.keystore')
            storePassword 'Xz&150120'
            keyPassword 'Xz&150120'
            keyAlias 'rxjava2_and_retrofit2'
        }
    }

    buildTypes {
        release {
            //java代码中引用的定义形式
            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            //java代码中引用的定义形式
            buildConfigField "Boolean", "IS_MODULE", "${isModule}"
            buildConfigField "Boolean", "IS_RELEASE", "${isRelease}"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains', module: 'annotations'
    }

    ndkVersion '21.1.6352462'

//    externalNativeBuild {
//        cmake {
//            path file('src/main/cpp/CMakeLists.txt')
//            version '3.10.2'
//        }
//    }

    //给Module 内的资源名增加前缀, 避免资源名冲突
    resourcePrefix "app_"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    if (isModule.toBoolean()) {
        //可独立运行的app
        implementation project(path: ':module_main')
    } else {
        implementation project(path: ':module_home')



//        implementation project(path: ':library_common')
//        implementation project(path: ':library_network')
//        implementation project(path: ':library_glide')
//        implementation project(path: ':library_custom_view')
//        implementation project(path: ':library_login')
//        implementation project(path: ':library_mvp')
//        implementation project(path: ':library_binding')
//        // room
//        implementation "androidx.room:room-runtime:$BuildVersions.room_version"
//        annotationProcessor "androidx.room:room-compiler:$BuildVersions.room_version"
//        implementation "androidx.lifecycle:lifecycle-runtime-ktx:$BuildVersions.lifecycle_runtime_ktx_version"
//
////    implementation project(path: ':irecyclerview')
//
//        //Android路由（用于不同app之间的跳转）
//        implementation "com.alibaba:arouter-api:$BuildVersions.arouter_api_version"
//        kapt "com.alibaba:arouter-compiler:$BuildVersions.arouter_compiler_version"
//
////    //播放器框架
////    implementation 'com.shuyu:GSYVideoPlayer:8.0.0'
////    implementation 'com.shuyu:gsyVideoPlayer-armv7a:8.0.0'
////    implementation 'com.shuyu:gsyVideoPlayer-arm64:8.0.0'
//
//        //百分比进度条
//        implementation "cn.bingoogolapple:bga-progressbar:$BuildVersions.bga_progressbar_version"
//
//        //定位功能
////    implementation 'com.amap.api:location:latest.integration'
//        //这个版本临时不能用了，报错Could not HEAD 'https://repo.maven.apache.org/maven2/com/amap/api/location/maven-metadata.xml'. Received status code 400 from server: Bad Request，
//        //以前也遇到过，可能是他的latest.integration服务器暂时不能用了，改成最新的数字版本就可以了。
//        implementation 'com.amap.api:location:6.3.0'


        implementation project(path: ':module_project')
        implementation project(path: ':module_square')
        implementation project(path: ':module_resource')
        implementation project(path: ':module_mine')
    }

}
